import numpy as np
from .utils import mask, condense, pauli_diagonalize1,stabilizer_measure
from .paulialg import Pauli, pauli, PauliMonomial, pauli_zero
from .stabilizer import (StabilizerState, CliffordMap,
    zero_state, identity_map, clifford_rotation_map, random_clifford_map)

class CliffordGate(object):
    '''Represents a Clifford gate.

    Parameters:
    *qubits: int - the qubits that this gate acts on.

    Data:
    generator: Pauli - if the clifford gate is a rotation generated by a single 
        Pauli generator (which is generally not the case), then this records 
        its generator. It is more efficient to implement Clifford rotation than 
        generic Clifford transform.
    forward_map / backward_map: CliffordMap - a generic Clifford gate will be 
        described by the Clifford map, which is a table specifying how each 
        single Pauli operator gets mapped to. (forward and backward maps must 
        be inverse to each other).

    Note: if either the geneator or Clifford maps are specified, the gate will 
        represent the specific unitary transformation; otherwise, the gate 
        is treated as a random Clifford gate that resamples at every call.'''
    def __init__(self, *qubits):
        self.qubits = qubits # the qubits this gate acts on
        self.n = len(self.qubits) # number of qubits it acts on
        self.generator = None
        self.forward_map = None
        self.backward_map = None

    def __repr__(self, option='stim'):
            '''Returns a string representation of the gate.

            parameter:
            option: str - 'stim' for stim format, 'pyclifford' for pyclifford format.

            returns:
            str - the string representation of the gate.
            '''
            if option == 'pyclifford':
                return '[{}]'.format(','.join(str(qubit) for qubit in self.qubits))
            elif option == 'stim':
                 pass
            
class CliffordLayer(object):
    pass

class MeasureLayer(object):
    pass

class CliffordCircuit(object):
    pass

class Circuit(object):
    '''
    Reprsents a Clifford circuit with measurements
    '''
    def __init__(self,N):
        self.N = N # number of qubits in the system
        self.first_layer = CliffordLayer()
        self.last_layer = self.first_layer
        self.measure_result = []
        self.log2prob = 0.0
        self.unitary = True # if True, no measurement layer is inside
        self.forward_map = None
        self.backward_map = None
        self.num_of_measures = 0
        
    def __repr__(self):
        layout = '\n'.join(repr(layer) for layer in self.layers_backward())
        c =  'CliffordCircuit(\n{})'.format(layout).replace('\n','\n  ')+\
        '\n Unitary:{}'.format(self.unitary)
        return c

### gates ###
def CNOT(*qubits):
    pass